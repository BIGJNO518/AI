import java.util.*;
/** This class is designed as a genetic search algorithm to maximize any given function with 10 parameters.
/* The purpose will be to create "children" of potential "good fit" parents based on a "roullette" style pairing of 80% 
/* probability that the "best" parents will be paired. Also a "crossover" point will be established, followed by 
/* a 1% chance that a mutation could occur in any cells x1...x10.
/* The result should produce a chromsome such that it mazimizes the function given.
**/

public class MaximizeFunction {

    public static void main (String[] args){
        MaximizeFunction mf = new MaximizeFunction();
        ArrayList newChrome;
        ArrayList<ArrayList> parentList = new ArrayList<>();
        int i = 0;
        Scanner scr = new Scanner(System.in);

        System.out.println("Enter Population Size: ");
        int popsize = scr.nextInt();



        while (i < popsize) {
            newChrome = mf.populateChromosome();
            parentList.add(newChrome);
            i++;
            System.out.println(i + ".  " + parentList.get(i-1));

        }
    }


    public ArrayList populateChromosome () {
        Random rand = new Random();
        ArrayList<Integer> chromosome = new ArrayList<>();
        int pop;
        int i = 0;
        while (i < 10) {
            pop = rand.nextInt(10) + 1;
            if (i == 0) {
                chromosome.add(pop);
            } else {
                while (chromosome.indexOf(pop) != -1)
                    pop = rand.nextInt(9) + 1;

                chromosome.add(pop);
            }
            i++;
        }

    return chromosome;
    }




    public int testFunction(int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10){
        int total = 0;
        total = (int) (4*(Math.pow(x1,2)) - 2*(Math.pow(x2, 3)) + 9*(Math.pow(x3,2)) - 11*(Math.pow(x4,2)) + 5*(Math.sqrt(x5)) +
          (Math.pow((x6 +x7), 3)) - 5*(Math.pow(x8, 2)) + 10*(Math.pow((x9 - x10), 2)) );
        return total;
    }





}
